<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_npc</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// old AI code
/*
    // this code is buggy
    // for some reason, the npc moves right to the player before
    // the player can move, even though it's only supposed to move
    // one tile
    
    // UPDATE: ok so this code is probably ok, but the way it's handled
    // in the UserDefined0 event handler is probably better.
    // The problem originally described is due to the way the user
    // input is handled and how it isn't being handled by the FSM.
    // Need to figure out a better way (need to make the FSM handle
    // inputs).

if (global.gamestate == gamestates.npc_action) {
    // see if player is adjacent
    var adjacent_squares = scr_get_adjacent_squares(x, y);
    var num_squares = ds_list_size(adjacent_squares);
    var target_x = -1;
    var target_y = -1;
    for (var i = 0; i &lt; num_squares; i++) {
        var xyPair = ds_list_find_value(adjacent_squares, i);
        var candidate_x = ds_map_find_value(xyPair, "x");
        var candidate_y = ds_map_find_value(xyPair, "y");
        
        if (place_meeting(candidate_x, candidate_y, obj_pc)) {
            target_x = candidate_x;
            target_y = candidate_y;
            break;
        }
    }

    var pc;
    if (instance_exists(obj_pc)) {
        pc = instance_nearest(x, y, obj_pc);
    }
    
    // if not adjacent, move towards player
    if ((target_x &lt; 0) || (target_y &lt; 0)) {
        var x_move = sign(pc.x - x) * sprite_width;
        var y_move = sign(pc.y - y) * sprite_width;

        x += x_move;
        y += y_move;        
    }
    // if adjacent, attack
    else {
        
    }

    global.gamestate = gamestates.pc_action;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// AI code


// locate pc
var pc = instance_nearest(x, y, obj_pc);
var dx = pc.x - x;
var dy = pc.y - y;

// if pc not adjacent, move to pc
if (abs(dx) &gt; sprite_width || abs(dy) &gt; sprite_width) {
    var x_dir = sign(pc.x - x);
    var y_dir = sign(pc.y - y);
    
    x += x_dir * sprite_width;
    y += y_dir * sprite_width;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
