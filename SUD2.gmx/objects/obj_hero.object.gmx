<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fighter</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creation Code

MOVEMENT_SPEED = 5;
GRAVITY = 2;
v_speed = 0;
JUMP_SPEED = 22;
MAX_HP = 5;
current_hp = MAX_HP;
dir_x = 1;
can_attack = true;
on_ladder = false;

//D20 numbers
ac = 10;

//Hero Targets
var left_target = instance_create(x-sprite_width,y,obj_hero_target);
var right_target = instance_create(x+sprite_width,y,obj_hero_target);
left_target.offset_x = -sprite_width;
right_target.offset_x = sprite_width;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack Timer
can_attack = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacks
if(keyboard_check(vk_left)){
    dir_x = -1;
}
if(keyboard_check(vk_right)){
    dir_x = 1;
}

if(keyboard_check_pressed(vk_control) &amp;&amp; can_attack &amp;&amp; instance_exists(obj_enemy)){
    var attack = instance_create(x,y,obj_attack);
    attack.dir_x = instance_nearest(x,y,obj_enemy).x - x;
    attack.target = obj_enemy;
    can_attack = false;
    alarm[0] = room_speed;
    audio_play_sound(snd_swing,10,false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Horizontal Movement Control

var key_right = keyboard_check(vk_right);
var key_left = -keyboard_check(vk_left);
var move = key_right + key_left;
var h_speed = move*MOVEMENT_SPEED;

if(place_meeting(x+h_speed,y,obj_wall)||place_meeting(x+h_speed,y,obj_enemy)){
    while(!place_meeting(x+sign(h_speed),y,obj_wall)&amp;&amp;!place_meeting(x+sign(h_speed),y,obj_enemy)){
        x += sign(h_speed);
    }
    h_speed = 0;
}

x += h_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Health
if(current_hp &lt;= 0){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Ladder State
on_ladder = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vertical Movement Control

/*
var key_right = keyboard_check(vk_right);
var key_left = -keyboard_check(vk_left);
var move = key_right + key_left;
*/

var key_jump = keyboard_check_pressed(vk_space);
var key_up = -keyboard_check(vk_up);
var key_down = keyboard_check(vk_down);

//Jumping
//Can only jump when on a wall object
if(keyboard_check(vk_enter)){
    debugger = true;
}
if(place_meeting(x,y+1,obj_wall)){
    v_speed = key_jump * (-JUMP_SPEED);
}

//Gravity
if(v_speed &lt; 11 * GRAVITY){
    v_speed += GRAVITY;
}

//Ladders
if(key_down&gt;0&amp;&amp;place_meeting(x,y+1,obj_ladder)){
    on_ladder = true;
}
if(place_meeting(x,y,obj_ladder)){
    on_ladder = true;
}
if(place_meeting(x,y+v_speed,obj_ladder)){
    while(!place_meeting(x,y+sign(v_speed),obj_ladder)){
        y += sign(v_speed);
    }
    v_speed = 0;
}
if(on_ladder){
    v_speed = (key_up + key_down)*MOVEMENT_SPEED;
}


//Collision with wall or enemy
if(place_meeting(x,y+v_speed,obj_wall)||
   place_meeting(x,y+v_speed,obj_enemy)){
    while(!place_meeting(x,y+sign(v_speed),obj_wall)&amp;&amp;
          !place_meeting(x,y+sign(v_speed),obj_enemy)){
        y += sign(v_speed);
    }
    v_speed = 0;
}

//Move vertically
y += v_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
